// Generated by view binder compiler. Do not edit!
package com.example.garbage_v3.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.garbage_v3.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class GarbageSortingBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button addNewItemButton;

  @NonNull
  public final TextView headingWhereToSortIt;

  @NonNull
  public final Button listAllItemsButton;

  @NonNull
  public final Button whereToSortButton;

  @NonNull
  public final EditText whereToSortInput;

  @NonNull
  public final TextView whereToSortResult;

  private GarbageSortingBinding(@NonNull LinearLayout rootView, @NonNull Button addNewItemButton,
      @NonNull TextView headingWhereToSortIt, @NonNull Button listAllItemsButton,
      @NonNull Button whereToSortButton, @NonNull EditText whereToSortInput,
      @NonNull TextView whereToSortResult) {
    this.rootView = rootView;
    this.addNewItemButton = addNewItemButton;
    this.headingWhereToSortIt = headingWhereToSortIt;
    this.listAllItemsButton = listAllItemsButton;
    this.whereToSortButton = whereToSortButton;
    this.whereToSortInput = whereToSortInput;
    this.whereToSortResult = whereToSortResult;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static GarbageSortingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static GarbageSortingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.garbage_sorting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static GarbageSortingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_new_item_button;
      Button addNewItemButton = ViewBindings.findChildViewById(rootView, id);
      if (addNewItemButton == null) {
        break missingId;
      }

      id = R.id.heading_where_to_sort_it;
      TextView headingWhereToSortIt = ViewBindings.findChildViewById(rootView, id);
      if (headingWhereToSortIt == null) {
        break missingId;
      }

      id = R.id.list_all_items_button;
      Button listAllItemsButton = ViewBindings.findChildViewById(rootView, id);
      if (listAllItemsButton == null) {
        break missingId;
      }

      id = R.id.where_to_sort_button;
      Button whereToSortButton = ViewBindings.findChildViewById(rootView, id);
      if (whereToSortButton == null) {
        break missingId;
      }

      id = R.id.where_to_sort_input;
      EditText whereToSortInput = ViewBindings.findChildViewById(rootView, id);
      if (whereToSortInput == null) {
        break missingId;
      }

      id = R.id.where_to_sort_result;
      TextView whereToSortResult = ViewBindings.findChildViewById(rootView, id);
      if (whereToSortResult == null) {
        break missingId;
      }

      return new GarbageSortingBinding((LinearLayout) rootView, addNewItemButton,
          headingWhereToSortIt, listAllItemsButton, whereToSortButton, whereToSortInput,
          whereToSortResult);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
